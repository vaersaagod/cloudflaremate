<?php

namespace vaersaagod\cloudflaremate\services;

use Craft;
use craft\base\Element;
use craft\base\ElementInterface;
use craft\console\controllers\ResaveController;
use craft\elements\Asset;
use craft\elements\Entry;
use craft\elements\GlobalSet;
use craft\elements\User;
use craft\helpers\ElementHelper;
use craft\services\Elements;

use craft\web\Response;
use yii\base\Application;
use yii\base\Component;
use yii\base\Controller;
use yii\base\Event;

/**
 * Purge service
 */
class Purge extends Component
{

    /** @var array Element[] */
    private array $_elementsToPurge = [];

    private const PURGABLE_ELEMENT_TYPES = [
        Entry::class,
        Asset::class,
        GlobalSet::class,
        User::class,
    ];

    public function __construct($config = [])
    {
        parent::__construct($config);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        Craft::$app->onInit(function () {
            Event::on(
                Application::class,
                Application::EVENT_AFTER_REQUEST,
                function (Event $event) {
                    $this->_purgeElementsInternal();
                }
            );
        });
    }

    public function maybePurgeElement(ElementInterface $element): void
    {
        if (
            !in_array(get_class($element), self::PURGABLE_ELEMENT_TYPES, true) ||
            ElementHelper::isDraftOrRevision($element) ||
            $element instanceof Asset && $element->getScenario() === Asset::SCENARIO_INDEX ||
            $element->getUrl() === null
        ) {
            return;
        }

        // Purge everything for globals
        if ($element instanceof GlobalSet) {
            $this->purgeEverything($element->siteId);
            return;
        }

        $this->_elementsToPurge[] = $element;

    }

    public function purgeEverything(int $siteId): void
    {

    }

    private function _purgeElementsInternal(): void
    {
        if (empty($this->_elementsToPurge)) {
            return;
        }

        /** @var Element $element */
        foreach ($this->_elementsToPurge as $element) {
            if (!empty($element->uri) && $element->uri !== '__home__') {
                // Get all URIs that start with each element's URI

            }
            // Get all related elements with URIs
            Craft::dd($element->uri);
        }


        $this->_elementsToPurge = [];

    }

}
